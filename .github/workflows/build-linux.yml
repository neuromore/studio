name: Build Linux
on:
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - 'master'
      - 'release'
jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      MODE: release
      TARGET_OS: linux
      ARCH: ${{ matrix.arch }}
      BRANDING: ${{ matrix.branding }}
      JOBS: 4
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04,ubuntu-22.04]
        arch: [amd64,i386,arm64,armhf]
        branding: [neuromore,supermind]
    steps:

    # Remove Packages (20.04)
    - name: Remove Packages (20.04)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get install -f -y --allow-downgrades libpcre2-8-0=10.34-7
        sudo apt-get autoremove -y

    # Remove Packages (22.04)
    - name: Remove Packages (22.04)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get remove -f -y libunwind-14-dev
        sudo apt-get install -f -y libunwind-dev
        sudo apt-get autoremove -y

    # Purge PPA
    - name: Purge PPA
      run: |
        sudo apt-get update
        sudo apt-get install -y ppa-purge aptitude
        sudo ppa-purge -y ppa:ubuntu-toolchain-r/test

    # Ubuntu Update
    - name: Update Ubuntu
      run: |
        sudo apt-get update -y 
        sudo apt-get upgrade -f -y
        sudo apt-get dist-upgrade -f -y

    # Ubuntu Version
    - name: Ubuntu Version
      run: lsb_release -a

    # LLVM + CLANG (amd64)
    - name: LLVM + CLANG (amd64)
      run: sudo apt-get install -y llvm clang

    # Cross-Compile Support
    - name: Cross-Compile Support
      uses: cyberjunk/gha-ubuntu-cross@v2
      if: matrix.arch != 'amd64'
      with:
        arch: ${{ matrix.arch }}

    # Ubuntu Packages
    - name: Ubuntu Packages
      run: |
        sudo apt-get install -y \
          libopengl-dev:$ARCH \
          libglx-dev:$ARCH \
          libgles-dev:$ARCH \
          libgl1-mesa-dev:$ARCH \
          libglu1-mesa-dev:$ARCH \
          libsm-dev:$ARCH \
          libx11-dev:$ARCH \
          libx11-xcb-dev:$ARCH \
          libexpat1-dev:$ARCH \
          libxkbcommon-dev:$ARCH \
          libxcb1-dev:$ARCH \
          libxcb-glx0-dev:$ARCH \
          libxcb-icccm4-dev:$ARCH \
          libxcb-image0-dev:$ARCH \
          libxcb-keysyms1-dev:$ARCH \
          libxcb-randr0-dev:$ARCH \
          libxcb-render0-dev:$ARCH \
          libxcb-render-util0-dev:$ARCH \
          libxcb-shape0-dev:$ARCH \
          libxcb-shm0-dev:$ARCH \
          libxcb-sync-dev:$ARCH \
          libxcb-xfixes0-dev:$ARCH \
          libxcb-xinerama0-dev:$ARCH \
          libxcb-xkb-dev:$ARCH \
          libxcb-util-dev:$ARCH \
          libglib2.0-dev:$ARCH \
          libgstreamer1.0-dev:$ARCH \
          libgstreamer-plugins-base1.0-dev:$ARCH \
          libgstreamer-plugins-good1.0-dev:$ARCH

    # QEMU (ARM64/ARMHF)
    - name: QEMU (ARM64/ARMHF)
      if: matrix.arch == 'arm64' || matrix.arch == 'armhf' || matrix.arch == 'armel' 
      run: sudo apt-get install qemu-user qemu-user-static

    ############################################################
    
    # Checkout
    - name: Checkout
      uses: actions/checkout@v3

    # Set Environment Vars
    - name: Set Environment Vars
      run: |
        if [ $ARCH == amd64 ]; then \
          echo "TARGET_ARCH=x64" >> $GITHUB_ENV; \
          echo "TARGET=x86_64-linux-gnu" >> $GITHUB_ENV; \
        fi
        if [ $ARCH == i386 ]; then \
          echo "TARGET_ARCH=x86" >> $GITHUB_ENV; \
          echo "TARGET=i686-linux-gnu" >> $GITHUB_ENV; \
        fi
        if [ $ARCH == arm64 ]; then \
          echo "TARGET_ARCH=arm64" >> $GITHUB_ENV; \
          echo "TARGET=aarch64-linux-gnu" >> $GITHUB_ENV; \
        fi
        if [ $ARCH == armhf ]; then \
          echo "TARGET_ARCH=arm" >> $GITHUB_ENV; \
          echo "TARGET=arm-linux-gnueabihf" >> $GITHUB_ENV; \
        fi
      
    # Version
    - name: Version
      run: |
        echo MODE: $MODE
        echo ARCH: $ARCH
        echo TARGET: $TARGET
        echo TARGET_ARCH: $TARGET_ARCH
        clang++ --target=$TARGET -v
        make -v

    # Load Dependencies from Cache
    - name: Cache Dependencies
      id: cache-dependencies
      uses: actions/cache@v3
      with:
        path: |
          deps/build/make/bin/linux-*
          deps/build/make/lib/linux-*
        key: dependencies-${{ env.BRANCH_NAME }}-${{ env.TARGET_OS }}-${{ env.TARGET_ARCH }}-${{ matrix.os }}-${{ hashFiles('deps/VERSION') }}

    # Build QtTools (amd64)
    - name: Build QtTools (amd64)
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: make TARGET_ARCH=x64 QtTools -j${{ env.JOBS }}

    # Build Dependencies
    - name: Build Dependencies
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: make Dependencies -j${{ env.JOBS }}

    # Build Engine
    - name: Build Engine
      run: make Engine -j${{ env.JOBS }}

    # Build QtBase
    - name: Build QtBase
      run: make QtBase -j${{ env.JOBS }}

    # Build Studio
    - name: Build Studio
      run: make Studio -j${{ env.JOBS }}

    # Build EngineLIB
    - name: Build EngineLIB
      run: make EngineLIB -j${{ env.JOBS }}

    # Build EngineJNI
    - name: Build EngineJNI
      run: make EngineJNI -j${{ env.JOBS }}

    # Binary Info
    - name: Binary Info
      if: matrix.arch == 'amd64' || matrix.arch == 'i386'
      run: |
        echo Studio
        ldd ./build/make/bin/linux-${{ env.TARGET_ARCH }}/Studio
        echo EngineLIB
        ldd ./build/make/lib/linux-${{ env.TARGET_ARCH }}/EngineLIB.so
        echo EngineJNI
        ldd ./build/make/lib/linux-${{ env.TARGET_ARCH }}/EngineJNI.so

    # Make (dist)        
    - name: Make (dist)
      run: make dist

    # Upload
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: Packages (${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.branding }})
        path: ./dist/${{ matrix.os }}/*.deb

    # Upload EngineLIB
    - name: Upload EngineLIB
      uses: actions/upload-artifact@v3
      with:
        name: EngineLIB (${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.branding }})
        path: |
          ./src/Engine/neuromoreEngine.h
          ./build/make/lib/linux-${{ env.TARGET_ARCH }}/EngineLIB.so

    # Upload EngineJNI
    - name: Upload EngineJNI
      uses: actions/upload-artifact@v3
      with:
        name: EngineJNI (${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.branding }})
        path: |
          ./build/make/lib/linux-${{ env.TARGET_ARCH }}/EngineJNI.so
          ./build/make/lib/linux-${{ env.TARGET_ARCH }}/EngineJNI.jar
