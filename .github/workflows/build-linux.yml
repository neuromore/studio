name: Build Linux
on:
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - 'master'
jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    env:
      MODE: release
      TARGET_OS: linux
      ARCH: ${{ matrix.arch }}
      JOBS: 4
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04,ubuntu-22.04]
        arch: [amd64,i386,arm64,armhf]
    steps:
    
    # Checkout
    - name: Checkout
      uses: actions/checkout@v3

    - name: Purge Packages (20.04)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get remove -f -y \
          apache2-bin \
          apache2-utils \
          apache2 \
          clang-10 \
          clang-11 \
          cpp-9 \
          g++-9 \
          gcc-9 \
          php \
          nginx \
          libpcre2-dev \
          libpcre2-8-0 \
          libpcre2-16-0 \
          libpcre2-32-0 \
          libunwind-dev
        sudo apt-get install -f -y \
          llvm \
          clang \
          libunwind-dev \
          libpcre2-dev
        sudo apt-get autoremove -y

    - name: Purge Packages (22.04)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get remove -f -y \
          apache2-bin \
          apache2-utils \
          apache2 \
          clang-12 \
          clang-13 \
          cpp-10 \
          cpp-9 \
          g++-10 \
          g++-9 \
          gcc-10 \
          gcc-9 \
          php \
          nginx \
          libpcre2-dev \
          libpcre2-8-0 \
          libpcre2-16-0 \
          libpcre2-32-0 \
          libunwind-14-dev \
          libunwind-dev
        sudo apt-get install -f -y \
          llvm \
          clang \
          libunwind-dev
        sudo apt-get autoremove -y

    # Purge PPA
    - name: Purge PPA
      run: |
        sudo apt-get update
        sudo apt-get install -y ppa-purge aptitude
        sudo ppa-purge -y ppa:ubuntu-toolchain-r/test


    - name: Debug 20.04
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo rm -rf /etc/apt/sources.list.d/microsoft-prod.*
        sudo rm -rf /etc/apt/sources.list.d/ubuntu-toolchain-r-ubuntu-test-focal.*
        ls -la /etc/apt/sources.list.d

    - name: Debug 22.04
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo rm -rf /etc/apt/sources.list.d/microsoft-prod.*
        sudo rm -rf /etc/apt/sources.list.d/ubuntu-toolchain-r-ubuntu-test-jammy.*
        ls -la /etc/apt/sources.list.d

    # Ubuntu Update
    - name: Update Ubuntu
      run: |
        sudo aptitude update -y 
        sudo aptitude upgrade -f -y
        sudo aptitude dist-upgrade -f -y

    # Ubuntu Version
    - name: Ubuntu Version
      run: lsb_release -a

    # Cross-Compile Support
    - name: Cross-Compile Support
      uses: cyberjunk/gha-ubuntu-cross@v1
      if: matrix.arch != 'amd64'
      with:
        arch: ${{ matrix.arch }}

    - name: Host Architecture
      run: dpkg --print-architecture

    - name: Foreign Architectures
      run: dpkg --print-foreign-architectures

    - name: LLVM
      run: sudo apt-get install -y llvm

    - name: Ubuntu Packages
      run: |
        sudo aptitude install -f -y \
          libopengl-dev:$ARCH \
          libglx-dev:$ARCH \
          libgles-dev:$ARCH \
          libgl1-mesa-dev:$ARCH \
          libglu1-mesa-dev:$ARCH \
          libsm-dev:$ARCH \
          libx11-dev:$ARCH \
          libx11-xcb-dev:$ARCH \
          libexpat1-dev:$ARCH \
          libxkbcommon-dev:$ARCH \
          libxcb1-dev:$ARCH \
          libxcb-glx0-dev:$ARCH \
          libxcb-icccm4-dev:$ARCH \
          libxcb-image0-dev:$ARCH \
          libxcb-keysyms1-dev:$ARCH \
          libxcb-randr0-dev:$ARCH \
          libxcb-render0-dev:$ARCH \
          libxcb-render-util0-dev:$ARCH \
          libxcb-shape0-dev:$ARCH \
          libxcb-shm0-dev:$ARCH \
          libxcb-sync-dev:$ARCH \
          libxcb-xfixes0-dev:$ARCH \
          libxcb-xinerama0-dev:$ARCH \
          libxcb-xkb-dev:$ARCH \
          libxcb-util-dev:$ARCH

    - name: Installed AMD64 Packages
      run: apt list --installed | { grep amd64 || true; }
    - name: Installed X86 Packages
      run: apt list --installed | { grep i386 || true; }
    - name: Installed ARM64 Packages
      run: apt list --installed | { grep arm64 || true; }
    - name: Installed ARMHF Packages
      run: apt list --installed | { grep armhf || true; }

    - name: Ubuntu Packages Problematic
      run: |
        sudo aptitude install -f -y \
          libglib2.0-dev:$ARCH \
          libgstreamer1.0-dev:$ARCH \
          libgstreamer-plugins-base1.0-dev:$ARCH \
          libgstreamer-plugins-good1.0-dev:$ARCH


    - name: Debug GST
      run: |
        ls -la /usr/include


    - name: QEMU (ARM64/ARMHF)
      if: matrix.arch == 'arm64' || matrix.arch == 'armhf' || matrix.arch == 'armel' 
      run: sudo apt-get install qemu-user qemu-user-static

    - name: Set Environment Vars
      run: |
        if [ $ARCH == amd64 ]; then \
          echo "TARGET_ARCH=x64" >> $GITHUB_ENV; \
          echo "TARGET=x86_64-linux-gnu" >> $GITHUB_ENV; \
          echo "${{ inputs.cpuflags-x64 }}" >> $GITHUB_ENV; \
        fi
        if [ $ARCH == i386 ]; then \
          echo "TARGET_ARCH=x86" >> $GITHUB_ENV; \
          echo "TARGET=i686-linux-gnu" >> $GITHUB_ENV; \
          echo "${{ inputs.cpuflags-x86 }}" >> $GITHUB_ENV; \
        fi
        if [ $ARCH == arm64 ]; then \
          echo "TARGET_ARCH=arm64" >> $GITHUB_ENV; \
          echo "TARGET=aarch64-linux-gnu" >> $GITHUB_ENV; \
          echo "${{ inputs.cpuflags-arm64 }}" >> $GITHUB_ENV; \
        fi
        if [ $ARCH == armhf ]; then \
          echo "TARGET_ARCH=arm" >> $GITHUB_ENV; \
          echo "TARGET=arm-linux-gnueabihf" >> $GITHUB_ENV; \
          echo "${{ inputs.cpuflags-arm }}" >> $GITHUB_ENV; \
        fi
      
    - name: Version
      run: |
        echo MODE: $MODE
        echo ARCH: $ARCH
        echo TARGET: $TARGET
        echo TARGET_ARCH: $TARGET_ARCH
        clang++ --target=$TARGET -v
        make -v

    - name: Build QtTools for AMD64 Host
      if: matrix.arch != 'amd64'
      run: make TARGET_ARCH=x64 QtTools -j${{ env.JOBS }}

    - name: Build Dependencies for Target
      run: make Dependencies -j${{ env.JOBS }}

    - name: Build
      run: make -j${{ env.JOBS }}
        
    - name: Make (dist)
      run: make dist
      
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: Packages (${{ matrix.os }}-${{ matrix.arch }})
        path: ./dist/${{ matrix.os }}/*.deb
