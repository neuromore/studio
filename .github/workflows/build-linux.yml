name: Build Linux
on:
  workflow_dispatch:
    inputs:
      cpuflags-x64:
        description: 'CPUFLAGS for X64'
        type: string
        required: false
      cpuflags-x86:
        description: 'CPUFLAGS for X86'
        type: string
        required: false
      cpuflags-arm64:
        description: 'CPUFLAGS for ARM64'
        type: string
        required: false
      cpuflags-arm:
        description: 'CPUFLAGS for ARM'
        type: string
        required: false
  workflow_call:
  push:
    branches:
      - 'master'
jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    env:
      MODE: release
      TARGET_OS: linux
      ARCH: ${{ matrix.arch }}
      JOBS: 4
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04,ubuntu-22.04]
        arch: [amd64,i386,arm64,armhf]
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Cross
      if: matrix.arch != 'amd64'
      shell: bash
      run: |
        dpkg --print-architecture
        dpkg --print-foreign-architectures
        export CODENAME=$(lsb_release -c -s)
        export APTFILE=/etc/apt/sources.list.d/$ARCH-cross-compile-sources.list
        sudo dpkg --add-architecture $ARCH
        if [ $ARCH != amd64 ] && [ $ARCH != i386 ]; then \
          sudo bash -c "echo -e '\
            deb [arch=$ARCH] http://ports.ubuntu.com/ $CODENAME main restricted \n\
            deb [arch=$ARCH] http://ports.ubuntu.com/ $CODENAME-updates main restricted \n\
            deb [arch=$ARCH] http://ports.ubuntu.com/ $CODENAME universe \n\
            deb [arch=$ARCH] http://ports.ubuntu.com/ $CODENAME-updates universe \n\
            deb [arch=$ARCH] http://ports.ubuntu.com/ $CODENAME multiverse \n\
            deb [arch=$ARCH] http://ports.ubuntu.com/ $CODENAME-updates multiverse \n\
            deb [arch=$ARCH] http://ports.ubuntu.com/ $CODENAME-backports main restricted universe multiverse \n' > $APTFILE"; fi
        if [ $ARCH == i386 ]; then \
          sudo sed -i 's/deb http/deb [arch=amd64,i386] http/g' /etc/apt/sources.list; \
        else \
          sudo sed -i 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list; \
        fi
        sudo apt-get update
        sudo apt-get install \
            llvm \
            libstdc++6-$ARCH-cross \
            libc6-dev-$ARCH-cross \
            libc6-dev:$ARCH \
            linux-libc-dev-$ARCH-cross
        if [ $ARCH != amd64 ] && [ $ARCH != i386 ]; then \
          sudo apt-get install crossbuild-essential-$ARCH; \
        fi        
        if [ $ARCH == amd64 ]; then export ARCHGCC=x86-64-linux-gnu; fi
        if [ $ARCH == i386 ]; then export ARCHGCC=i686-linux-gnu; fi
        if [ $ARCH == arm64 ]; then export ARCHGCC=aarch64-linux-gnu; fi
        if [ $ARCH == armhf ]; then export ARCHGCC=arm-linux-gnueabihf; fi
        if [ $ARCH == armel ]; then export ARCHGCC=arm-linux-gnueabi; fi 
        if [ $CODENAME == bionic ]; then \
          sudo apt-get install \
            clang-10 \
            gcc-8-$ARCHGCC \
            g++-8-$ARCHGCC \
            libstdc++-8-dev-$ARCH-cross \
            libstdc++-8-dev:$ARCH; \
        fi       
        if [ $CODENAME == focal ]; then \
          sudo apt-get install \
            clang-12 \
            gcc-10-$ARCHGCC \
            g++-10-$ARCHGCC \
            libstdc++-10-dev-$ARCH-cross \
            libstdc++-10-dev:$ARCH; \
        fi
        if [ $CODENAME == jammy ]; then \
          sudo apt-get install \
            clang-14 \
            gcc-11-$ARCHGCC \
            g++-11-$ARCHGCC \
            libstdc++-11-dev-$ARCH-cross \
            libstdc++-11-dev:$ARCH; \
        fi
        clang++ --target=$ARCHGCC -v

    - name: Debug
      run: |
        ls -la /etc/apt/sources.list.d
        cat /etc/apt/sources.list

    - name: Host Architecture
      run: dpkg --print-architecture

    - name: Foreign Architectures
      run: dpkg --print-foreign-architectures

    - name: Ubuntu Package Update
      run: sudo apt-get update && sudo apt-get upgrade -f -y
      
    - name: Ubuntu Dist Upgrade
      run: sudo apt-get dist-upgrade -f -y

    - name: LLVM
      run: sudo apt-get install -y llvm

    - name: Ubuntu Packages
      run: |
        sudo apt-get install -y \
          libopengl-dev:$ARCH \
          libglx-dev:$ARCH \
          libgles-dev:$ARCH \
          libgl1-mesa-dev:$ARCH \
          libglu1-mesa-dev:$ARCH \
          libsm-dev:$ARCH \
          libx11-dev:$ARCH \
          libx11-xcb-dev:$ARCH \
          libexpat1-dev:$ARCH \
          libxkbcommon-dev:$ARCH \
          libxcb1-dev:$ARCH \
          libxcb-glx0-dev:$ARCH \
          libxcb-icccm4-dev:$ARCH \
          libxcb-image0-dev:$ARCH \
          libxcb-keysyms1-dev:$ARCH \
          libxcb-randr0-dev:$ARCH \
          libxcb-render0-dev:$ARCH \
          libxcb-render-util0-dev:$ARCH \
          libxcb-shape0-dev:$ARCH \
          libxcb-shm0-dev:$ARCH \
          libxcb-sync-dev:$ARCH \
          libxcb-xfixes0-dev:$ARCH \
          libxcb-xinerama0-dev:$ARCH \
          libxcb-xkb-dev:$ARCH \
          libxcb-util-dev:$ARCH

    - name: Installed AMD64 Packages
      run: apt list --installed | { grep amd64 || true; }

    - name: Installed X86 Packages
      run: apt list --installed | { grep i386 || true; }

    - name: Installed ARM64 Packages
      run: apt list --installed | { grep arm64 || true; }

    - name: Installed ARMHF Packages
      run: apt list --installed | { grep armhf || true; }

#    - name: Ubuntu Packages Problematic
#      run: |
#        sudo apt-get install \
#          libglib2.0-dev:$ARCH

    - name: QEMU (ARM64/ARMHF)
      if: matrix.arch == 'arm64' || matrix.arch == 'armhf' || matrix.arch == 'armel' 
      run: sudo apt-get install qemu-user qemu-user-static

    - name: Set Environment Vars
      run: |
        if [ $ARCH == amd64 ]; then \
          echo "TARGET_ARCH=x64" >> $GITHUB_ENV; \
          echo "TARGET=x86_64-linux-gnu" >> $GITHUB_ENV; \
          echo "${{ inputs.cpuflags-x64 }}" >> $GITHUB_ENV; \
        fi
        if [ $ARCH == i386 ]; then \
          echo "TARGET_ARCH=x86" >> $GITHUB_ENV; \
          echo "TARGET=i686-linux-gnu" >> $GITHUB_ENV; \
          echo "${{ inputs.cpuflags-x86 }}" >> $GITHUB_ENV; \
        fi
        if [ $ARCH == arm64 ]; then \
          echo "TARGET_ARCH=arm64" >> $GITHUB_ENV; \
          echo "TARGET=aarch64-linux-gnu" >> $GITHUB_ENV; \
          echo "${{ inputs.cpuflags-arm64 }}" >> $GITHUB_ENV; \
        fi
        if [ $ARCH == armhf ]; then \
          echo "TARGET_ARCH=arm" >> $GITHUB_ENV; \
          echo "TARGET=arm-linux-gnueabihf" >> $GITHUB_ENV; \
          echo "${{ inputs.cpuflags-arm }}" >> $GITHUB_ENV; \
        fi
      
    - name: Version
      run: |
        echo MODE: $MODE
        echo ARCH: $ARCH
        echo TARGET: $TARGET
        echo TARGET_ARCH: $TARGET_ARCH
        clang++ --target=$TARGET -v
        make -v

    - name: Build QtTools for AMD64 Host
      if: matrix.arch != 'amd64'
      run: make TARGET_ARCH=x64 QtTools -j${{ env.JOBS }}

    - name: Build Dependencies for Target
      run: make Dependencies -j${{ env.JOBS }}

    - name: Build
      run: make -j${{ env.JOBS }}
        
    - name: Make (dist)
      run: make dist
      
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: Packages (${{ matrix.os }}-${{ matrix.arch }})
        path: ./dist/${{ matrix.os }}/*.deb
